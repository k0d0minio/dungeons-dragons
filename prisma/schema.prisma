// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User Management (Simple password-based)
model User {
  id        String   @id @default(cuid())
  username  String   @unique
  password  String   // Simple password hash
  role      UserRole @default(PLAYER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  characters Character[]
  notes      Note[]
  inventories Inventory[]
  combatSessions CombatSession[]

  @@map("users")
}

enum UserRole {
  PLAYER
  DM
}

// Character Sheets
model Character {
  id          String   @id @default(cuid())
  userId      String
  name        String
  class       String
  race        String
  level       Int      @default(1)
  experience  Int      @default(0)
  
  // Basic Stats
  strength    Int      @default(10)
  dexterity   Int      @default(10)
  constitution Int     @default(10)
  intelligence Int     @default(10)
  wisdom      Int      @default(10)
  charisma    Int      @default(10)
  
  // Hit Points
  hitPoints   Int      @default(8)
  maxHitPoints Int     @default(8)
  armorClass  Int      @default(10)
  speed       Int      @default(30)
  
  // Additional Info
  background  String?
  alignment   String?
  personality String?
  ideals      String?
  bonds       String?
  flaws       String?
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  notes       Note[]
  inventory   Inventory?

  @@map("characters")
}

// Notes System
model Note {
  id          String   @id @default(cuid())
  userId      String
  characterId String?
  title       String
  content     String
  type        NoteType
  tags        String[] @default([])
  priority    Priority @default(NORMAL)
  isPrivate   Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  character   Character? @relation(fields: [characterId], references: [id], onDelete: Cascade)

  @@map("notes")
}

enum NoteType {
  SESSION
  CAMPAIGN
  PLAYER
  DM
}

enum Priority {
  LOW
  NORMAL
  HIGH
}

// Inventory System
model Inventory {
  id          String   @id @default(cuid())
  userId      String
  characterId String?  @unique
  name        String   @default("Main Inventory")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  character   Character? @relation(fields: [characterId], references: [id], onDelete: Cascade)
  items       InventoryItem[]

  @@map("inventories")
}

model InventoryItem {
  id          String   @id @default(cuid())
  inventoryId String
  name        String
  type        ItemType
  weight      Float    @default(0)
  quantity    Int      @default(1)
  value       Float    @default(0)
  description String?
  
  // Magic Item Properties
  isMagic     Boolean  @default(false)
  rarity      Rarity   @default(COMMON)
  attunement  Boolean  @default(false)
  magicProperties String?
  
  // Equipment Status
  equipped    Boolean  @default(false)
  equippedSlot String?
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  inventory   Inventory @relation(fields: [inventoryId], references: [id], onDelete: Cascade)

  @@map("inventory_items")
}

enum ItemType {
  WEAPON
  ARMOR
  SHIELD
  TOOL
  CONSUMABLE
  MISC
  MAGIC
}

enum Rarity {
  COMMON
  UNCOMMON
  RARE
  VERY_RARE
  LEGENDARY
  ARTIFACT
}

// Combat Tracker
model CombatSession {
  id          String   @id @default(cuid())
  userId      String
  name        String
  round       Int      @default(1)
  turn        Int      @default(1)
  isActive    Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  participants CombatParticipant[]

  @@map("combat_sessions")
}

model CombatParticipant {
  id              String   @id @default(cuid())
  combatSessionId String
  name            String
  initiative      Int
  armorClass      Int?
  hitPoints       Int?
  maxHitPoints    Int?
  isPlayer        Boolean  @default(false)
  isActive        Boolean  @default(false)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relations
  combatSession   CombatSession @relation(fields: [combatSessionId], references: [id], onDelete: Cascade)

  @@map("combat_participants")
}